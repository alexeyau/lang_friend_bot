import { Context, NarrowedContext, Telegraf } from 'telegraf';
import { Update, Message } from 'telegraf/typings/core/types/typegram';
import pool from './db';
import { escapeMarkdownV2, isValidFireworksKey, sanitizeInput, SEPARATOR } from './helpers';
import { requestGpt } from './api';
import {
  welcomeText,
  provideKeyText,
  historyCleanedText,
  saveKeyErrorText,
  noKeyText,
  requestAIerrorText,
  cleanHistoryErrorText,
  apiKeySavedText,
  saveApiKeyErrorText,
  cleanSettingsText,
  cleanSettingsErrorText,
} from './lang';

const MAX_INPUT_LENGTH = 400;

type Ctx = NarrowedContext<Context<Update>, {
  message: Update.New & Update.NonChannel & Message.TextMessage;
  update_id: number;
}>;

type HistoryMessage = {
  role: string;
  content: any;
}

const userTimers = new Map();

if (process.env.NODE_ENV !== 'production') { // fly.io has another way to set secrets
  require('dotenv').config();
}

const bot = new Telegraf(process.env.BOT_TOKEN || '');

bot.start((ctx) => ctx.reply(escapeMarkdownV2(welcomeText), { parse_mode: 'MarkdownV2' }));

bot.command('set_key', async (ctx) => {
  const userId = ctx.from.id;
  const apiKey = sanitizeInput(ctx.message.text).slice(0, MAX_INPUT_LENGTH).split(' ')[1];

  if (!apiKey) {
    return ctx.reply(provideKeyText);
  }

  try {
    const existingSettings = await pool.query('SELECT * FROM lf_bot_user_settings WHERE user_id = $1', [userId]);
    if (existingSettings.rows.length > 0) {
      await pool.query('UPDATE lf_bot_user_settings SET fireworks_api_key = $1 WHERE user_id = $2', [apiKey.trim(), userId]);
    } else {
      await pool.query('INSERT INTO lf_bot_user_settings (user_id, fireworks_api_key) VALUES ($1, $2)', [userId, apiKey.trim()]);
    }
    ctx.reply(apiKeySavedText);

  } catch (error) {
    console.error(saveKeyErrorText, error);
    ctx.reply(saveApiKeyErrorText);
  }
});


bot.command('clear_history', async (ctx) => {
  const userId = ctx.from.id;
  try {
    await pool.query('DELETE FROM lf_bot_message_history WHERE user_id = $1', [userId]);
    ctx.reply(historyCleanedText);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:', error);
    ctx.reply(cleanHistoryErrorText);
  }
});


bot.command('clear_key', async (ctx) => {
  const userId = ctx.from.id;
  try {
    await pool.query('DELETE FROM lf_bot_user_settings WHERE user_id = $1', [userId]);
    ctx.reply(cleanSettingsText);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    ctx.reply(cleanSettingsErrorText);
  }
});


bot.command('set_language', (ctx) => {

  ctx.reply('üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data: 'set_english' }],
        [{ text: 'üá¶üá≤ –ê—Ä–º—è–Ω—Å–∫–∏–π', callback_data: 'set_armenian' }],
        [{ text: 'üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∏–π', callback_data: 'set_greek' }],
        [{ text: 'üá∑üá¥ –†—É–º—ã–Ω—Å–∫–∏–π', callback_data: 'set_romanian' }],
        [{ text: 'üá∑üá∏ –°–µ—Ä–±—Å–∫–∏–π', callback_data: 'set_serbian' }],
        [{ text: 'üá™üá™ –≠—Å—Ç–æ–Ω—Å–∫–∏–π', callback_data: 'set_estonian' }],
      ]
    }
  });

});


bot.on('callback_query', async (ctx) => {
  const callback = ctx.callbackQuery;

  if ('data' in callback) {
    const userId = ctx.from.id;
    const data = callback.data;

    if (data === 'set_armenian') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '–≤–æ—Å—Ç–æ—á–Ω–æ–∞—Ä–º—è–Ω—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞—Ä–º—è–Ω—Å–∫–∏–π —è–∑—ã–∫ üá¶üá≤');
      await ctx.editMessageText('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫: –∞—Ä–º—è–Ω—Å–∫–∏–π üá¶üá≤');
    }

    if (data === 'set_english') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ üá¨üáß');
      await ctx.editMessageText('‚úÖ Language set: English üá¨üáß');
    }

    if (data === 'set_greek') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '–≥—Ä–µ—á–µ—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥—Ä–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫ üá¨üá∑');
      await ctx.editMessageText('‚úÖ Language set: Greek üá¨üá∑');
    }

    if (data === 'set_romanian') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '—Ä—É–º—ã–Ω—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É–º—ã–Ω—Å–∫–∏–π —è–∑—ã–∫ üá∑üá¥');
      await ctx.editMessageText('‚úÖ Language set: Romanian üá∑üá¥');
    }

    if (data === 'set_estonian') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '—ç—Å—Ç–æ–Ω—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —ç—Å—Ç–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ üá™üá™');
      await ctx.editMessageText('‚úÖ Language set: Estonian üá™üá™');
    }

    if (data === 'set_serbian') {
      await pool.query(
        `INSERT INTO lf_bot_user_settings (user_id, language)
         VALUES ($1, $2)
         ON CONFLICT (user_id) DO UPDATE SET language = EXCLUDED.language`,
        [userId, '—Å–µ—Ä–±—Å–∫–∏–π']
      );
      await ctx.answerCbQuery('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–µ—Ä–±—Å–∫–∏–π —è–∑—ã–∫ üá∑üá∏');
      await ctx.editMessageText('‚úÖ Language set: Serbian üá∑üá∏');
    }
  } else {
    console.warn('Unsupported callbackQuery type:', callback);
  }
});


// –ö–æ–º–∞–Ω–¥—ã –∏–¥—É—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userText = sanitizeInput(ctx.message.text).slice(0, MAX_INPUT_LENGTH);

  if (userText && userText.startsWith('/')) {
    return;
  }

  try {
    const userSettings = await pool.query('SELECT fireworks_api_key, language FROM lf_bot_user_settings WHERE user_id = $1', [userId]);

    const fireworksApiKey = userSettings.rows.length > 0 ? userSettings.rows[0].fireworks_api_key : process.env.FIREWORKS_API_KEY;
    const language = userSettings.rows[0].language || '—Ñ–∏–Ω—Å–∫–∏–π';

    if (!isValidFireworksKey(fireworksApiKey)) {
      return ctx.reply(noKeyText);
    }

    await pool.query(
      'INSERT INTO lf_bot_message_history (user_id, role, content) VALUES ($1, $2, $3)',
      [userId, 'user', userText]
    );

    const messagesForApi = await getHistory(userId);

    const data = await requestGpt(userText, messagesForApi, fireworksApiKey, language);
    const botResponseText = data.choices[0].text;

    if (botResponseText && botResponseText.trim().length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
      await pool.query(
        'INSERT INTO lf_bot_message_history (user_id, role, content) VALUES ($1, $2, $3)',
        [userId, 'assistant', botResponseText.split(SEPARATOR)[0]],
      );

      await ctx.reply(botResponseText.replace(SEPARATOR, ''));
    } else {
      console.warn('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
    }

    postponedPingMessage(
      userId,
      ctx,
      [ ...messagesForApi, {
        role: 'assistant',
        content: botResponseText.split(SEPARATOR)[0],
      }],
      fireworksApiKey,
      language,
    );

  } catch (error) {
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.', error);
    ctx.reply(requestAIerrorText);
  }
});

async function initBot() {
  await bot.telegram.setMyCommands([
    { command: 'set_language', description: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –∏–∑—É—á–µ–Ω–∏—è' },
    { command: 'clear_history', description: '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' },
    { command: 'clear_key', description: '–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' },
  ]);

  await bot.launch();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
}

initBot();

function postponedPingMessage (
  userId: number,
  ctx: Ctx,
  messagesForApi: HistoryMessage[],
  fireworksApiKey: string,
  language: string,
) {
    if (userTimers.has(userId)) {
      clearTimeout(userTimers.get(userId));
    }
  
    const timeoutId = setTimeout(async () => {

    const data = await requestGpt(null, messagesForApi, fireworksApiKey, language);
    const botResponseText = data.choices[0].text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
    await pool.query(
      'INSERT INTO lf_bot_message_history (user_id, role, content) VALUES ($1, $2, $3)',
      [userId, 'assistant', botResponseText.split(SEPARATOR)[0]],
    );

    ctx.reply(botResponseText.replace(SEPARATOR, ''));

      userTimers.delete(userId);
    }, 20 * 60 * 1000); // 20 –º–∏–Ω—É—Ç

    userTimers.set(userId, timeoutId);
}

async function getHistory (userId: number): Promise<HistoryMessage[]> {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
    const historyResult = await pool.query(
      'SELECT role, content FROM lf_bot_message_history WHERE user_id = $1 ORDER BY timestamp DESC LIMIT 7',
      [userId]
    );

    // –¢–∞–∫ –∫–∞–∫ –∏–∑ –ë–î –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (DESC), —Ä–∞–∑–≤–µ—Ä–Ω–µ–º –∏—Ö.
    return historyResult.rows.map(row => ({
      role: row.role,
      content: row.content
    })).reverse();
}

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));